%% @doc
%% Binary tree realization.
%%
%% @author Alexey Rybakov

% Module name.
-module(jdlib_btree).

% Export.
-export([init/1, data/1, left/1, right/1]).

%---------------------------------------------------------------------------------------------------
% Constants and macroses.
%---------------------------------------------------------------------------------------------------

%---------------------------------------------------------------------------------------------------
% Types.
%---------------------------------------------------------------------------------------------------

% Tree type.
-export_type([btree/0]).

% Define binary tree as record.
-record(btree,
{
    data :: term(),
    left :: btree() | null,
    right :: btree() | null
}).

% Binary tree.
-type btree() :: #btree{} | null.

%---------------------------------------------------------------------------------------------------
% Create and accessfFunctions.
%---------------------------------------------------------------------------------------------------

-spec init(D :: term()) -> btree().
%% @doc
%% Initialize new binary tree.
init(D) ->
    #btree{data = D, left = null, right = null}.

%---------------------------------------------------------------------------------------------------

-spec data(T :: btree()) -> term().
%% @doc
%% Get binary tree data.
data(#btree{data = D}) ->
    D.

%---------------------------------------------------------------------------------------------------

-spec left(T :: btree()) -> btree().
%% @doc
%% Get left subtree.
left(#btree{left = L}) ->
    L.

%---------------------------------------------------------------------------------------------------

-spec right(T :: btree()) -> btree().
%% @doc
%% Get right subtree.
right(#btree{right = R}) ->
    R.

%---------------------------------------------------------------------------------------------------

